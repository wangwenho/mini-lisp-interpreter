start: stmt+

?stmt: exp
        | def_stmt
        | print_stmt

?print_stmt: "(print-num" exp ")" -> print_num
            | "(print-bool" exp ")" -> print_bool

?exp: bool_val
    | number
    | variable
    | num_op
    | logical_op
    | fun_exp
    | fun_call
    | if_exp

?num_op: plus
        | minus
        | multiply
        | divide
        | modulus
        | greater
        | smaller
        | equal

plus: "(+" exp exp+ ")"
minus: "(-" exp exp ")"
multiply: "(*" exp exp+ ")"
divide: "(/" exp exp ")"
modulus: "(mod" exp exp ")"
greater: "(>" exp exp ")"
smaller: "(<" exp exp ")"
equal: "(=" exp exp+ ")"

?logical_op: and_op
            | or_op
            | not_op

and_op: "(and" exp exp+ ")"
or_op: "(or" exp exp+ ")"
not_op: "(not" exp ")"

def_stmt: "(define" variable exp ")"

variable: id

fun_exp: "(fun" fun_ids fun_body ")"
fun_ids: "(" id* ")"
fun_body: exp

fun_call: "(" fun_exp param* ")"
        | "(" fun_name param* ")"

param: exp

fun_name: id

if_exp: "(if" test_exp then_exp else_exp ")"
test_exp: exp
then_exp: exp
else_exp: exp

?bool_val: "#t" -> true
        | "#f" -> false

?number: SIGNED_NUMBER

?id: /[a-zA-Z_][a-zA-Z0-9_-]*/

%import common.SIGNED_NUMBER
%import common.CNAME -> ID
%import common.WS
%ignore WS